#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Basic imports
import numpy as np
import pandas as pd
import warnings
from astropy.time import Time
from pathlib import Path

warnings.filterwarnings('ignore')

# BG-related imports
from blackpy import BlackGEM
from blackpy.catalogs.blackgem import TransientsCatalog
from blackpy.catalogs.gaia import GaiaCatalog

user_home = str(Path.home())
creds_user_file = user_home + "/.bg_follow_user_john_creds"
creds_db_file = user_home + "/.bg_follow_transientsdb_creds"
bg = BlackGEM(creds_user_file=creds_user_file, creds_db_file=creds_db_file)

tc = TransientsCatalog(bg)



#####

## Read in all the targets
df_targets = pd.read_csv("./GEMTOM/data/target_watchlist_ids.csv")
# df_targets = pd.read_csv("./data/target_watchlist_ids.csv")

## Query for the latest magnitude
qu = """\
    SELECT runcat, mag_zogy, mjd, filter
    FROM (
        SELECT a.runcat,
               x.mag_zogy,
               i."mjd-obs" AS mjd,
               i.filter AS filter,
               ROW_NUMBER() OVER (PARTITION BY a.runcat ORDER BY i."mjd-obs" DESC) AS rn
        FROM assoc a
        JOIN extractedsource x ON a.xtrsrc = x.id
        JOIN image i ON x.image = i.id
       WHERE a.runcat IN %(id_list)s
         AND x.mag_zogy < 99
    ) sub
    WHERE rn = 1;
"""

clean_ID_list = [int(x) for x in df_targets["BlackGEM ID"] if str(x) != 'nan']
clean_ID_list = [int(x) for x in clean_ID_list if len(str(x)) != 0]

# clean_ID_list = [35106761,
#  34547460,
#  25030590,
#  36316687,
#  36250633,
#  36251669,
#  30497272,
#  36807114,
#  36934330,
#  36472697,
#  36113155,
#  36250359,
#  35857741,
#  36919577,
#  34376549,
#  36929678,
#  1294665,
#  36462941,
#  29449429,
#  29805765,
#  31422253,
#  33039497,
#  34739647,
#  16856661,
#  37071774,
#  38599941,
#  36301565,
#  36820065,
#  34799907,
#  4604586,
#  38835151,
#  36814728,
#  37549372,
#  37073092,
#  33953918,
#  32943239,
#  36828480,
#  39099862,
#  39094633,
#  38704534,
#  38928118,
#  37552682,
#  30808236,
#  39020925,
#  39031917,
#  39017301,
#  38990770,
#  38956155,
#  37066181,
#  31613247,
#  3163616,
#  38390792,
#  38755935,
#  34845414,
#  39250213,
#  39254857,
#  39264684,
#  38875303,
#  39044952,
#  39890598,
#  39041670,
#  40721786,
#  39409765,
#  39324076,
#  41099340,
#  41219351,
#  40421310,
#  40289039,
#  41903295,
#  41839529,
#  41994227,
#  41999132,
#  42128602,
#  43333096,
#  43479100,
#  42629416,
#  43299604,
#  43859009,
#  31023442,
#  44298979,
#  43859009,
#  44708151,
#  44803454,
#  44724270,
#  31747681,
#  44298979,
#  44798158,
#  42044763,
#  40428528,
#  44889005,
#  45312037,
#  45380156,
#  43437265,
#  45539405,
#  45030993,
#  45646666,
#  45648955,
#  36807114,
#  45225642,
#  45380222,
#  45378119,
#  44119639,
#  46522354,
#  42561727,
#  43404378,
#  45387919,
#  45809389,
#  46985847,
#  47013343,
#  44298979,
#  47334654,
#  6772386,
#  44149218,
#  48153350,
#  48645727,
#  18568000,
#  18568000,
#  49295675,
#  49332766,
#  6918197,
#  48153350,
#  47042687,
#  50017541,
#  50811259,
#  50837970,
#  48455670,
#  50811878,
#  48455670,
#  48499346,
#  47787620,
#  47822721,
#  47762021,
#  50399798,
#  48455864,
#  48447110,
#  50056197,
#  48461272,
#  16,
#  50811259,
#  50894794,
#  51009934,
#  51064224,
#  51124696,
#  51174303,
#  50993239,
#  48186998,
#  51034479,
#  50705321,
#  52114367,
#  50959476,
#  52318692,
#  52304593,
#  52381794,
#  25030590,
#  46651307,
#  52511949,
#  52545188,
#  52514014,
#  52614256,
#  47828567,
#  53102203,
#  52420029,
#  51430516,
#  52022294,
#  53160125,
#  53137999,
#  52911059,
#  53232617,
#  49059487,
#  53340811,
#  53230658,
#  53017840,
#  52292278,
#  53381241,
#  53155819,
#  48451460,
#  48474247,
#  48499341,
#  52318692,
#  52978499,
#  52979343,
#  53005854,
#  53009971,
#  53013538,
#  53660463,
#  53662977,
#  53683333,
#  53155819,
#  53381241,
#  52993457,
#  52969019,
#  48505388,
#  52992021,
#  52590051,
#  47547755,
#  51412685,
#  51412375,
#  51045202,
#  50894284,
#  50887177,
#  43479100,
#  48455864,
#  48513280,
#  48481399,
#  48499341,
#  48474247,
#  48472361,
#  48455670,
#  47548897,
#  47445839,
#  47478144,
#  47296958,
#  47331521,
#  47335226,
#  47207729,
#  43192533,
#  47005515,
#  45841440,
#  46955133,
#  44090308,
#  43863111,
#  46241701,
#  46285059,
#  46420755,
#  46354313,
#  46234654,
#  46239770,
#  46230195,
#  46202969,
#  44610728,
#  44518197,
#  44518181,
#  45801262,
#  44394132,
#  45762844,
#  45030993,
#  45539405,
#  45563105,
#  45558316,
#  45388850,
#  45341284,
#  45247247,
#  45246337,
#  45249192,
#  45029395,
#  45147327,
#  45118747,
#  45114706,
#  45069785,
#  44980206,
#  44820348,
#  45053274,
#  44949256,
#  45033174,
#  44964147,
#  44889107,
#  44861567,
#  44813336,
#  44808646,
#  44090124,
#  44724270,
#  44634265,
#  44767311,
#  44803454,
#  44185240,
#  44076910,
#  44618135,
#  44557103,
#  44314700,
#  44394180,
#  44518452,
#  44407325,
#  44388124,
#  44074378,
#  42712011,
#  43357138,
#  43357068,
#  43331640,
#  43221385,
#  43385087,
#  43333096,
#  43122546,
#  43017303,
#  42928127,
#  42789904,
#  42895953,
#  41326430,
#  42251581,
#  32751802,
#  40974662,
#  42504206,
#  9216835,
#  41648587,
#  42435976,
#  42404978,
#  42243830,
#  42150959,
#  42035865,
#  41992743,
#  41936801,
#  41683935,
#  41271640,
#  39785233,
#  39307128,
#  39254857,
#  37701085,
#  50959476,
#  53822173,
#  3650670,
#  31914622,
#  43192533,
#  32866802,
#  53232617,
#  52981170,
#  54330034,
#  54689924,
#  53727448,
#  53009971,
#  53155819,
#  52562124,
#  46241701,
#  45323312,
#  30422309,
#  56049063,
#  55257050,
#  54362521,
#  55433413,
#  56307630,
#  54080119,
#  55229974,
#  55433413,
#  55542678,
#  55256003,
#  55262431,
#  31388611,
#  56307630,
#  56097244,
#  56556195,
#  56658323,
#  56787761,
#  56556195,
#  56473406,
#  56574581,
#  55022828,
#  55257050,
#  54080119,
#  55229974,
#  56207727,
#  57085003,
#  46422047,
#  56557197,
#  56083502,
#  57436621,
#  33843995,
#  56658323,
#  57163821,
#  56197529,
#  56105625,
#  56232390,
#  55942002,
#  55397730,
#  56109542,
#  57402230,
#  56444899,
#  56091052,
#  56462899,
#  56829143,
#  54790798,
#  57096000,
#  58179464,
#  58293032,
#  58613423,
#  58687153,
#  59453741,
#  59505247,
#  58516722,
#  59632208,
#  59673387,
#  59639292,
#  29237210,
#  59575630,
#  60048885,
#  59898224,
#  59918316,
#  59919738,
#  60956151,
#  13840762,
#  61145960,
#  59798256,
#  59518137,
#  61171115,
#  61210653,
#  61540767,
#  56127756,
#  35409881,
#  55953473,
#  61752491,
#  53348959,
#  53390864,
#  61909486,
#  61929883,
#  61722261,
#  61748744,
#  62009261,
#  61752491,
#  62053724,
#  61912441,
#  61909486,
#  59538366,
#  60091867,
#  59802844,
#  59529827,
#  59540091,
#  59452838,
#  59216026,
#  59186696,
#  56083100,
#  54372564,
#  56462899,
#  56232390,
#  56083502,
#  56105020,
#  57085003,
#  55229974,
#  62230868,
#  62827775,
#  62881544,
#  62826400,
#  62904491,
#  62926212,
#  62136458,
#  39044952,
#  46241701,
#  46285059,
#  62826400,
#  62826400,
#  6688181,
#  60051505,
#  48528940,
#  60057472,
#  60052732,
#  60517459,
#  10141114,
#  30624262,
#  62905301,
#  61734483,
#  1351238]

params = {'id_list' : tuple(clean_ID_list)}
query = qu % (params)
print("Running Query...")
l_results = bg.run_query(query)

df_targets_2 = pd.DataFrame(l_results, columns=['BlackGEM ID','latest_mag','last_obs','filter'])


## Combine the two dataframes together
df_targets['BlackGEM ID'] = df_targets['BlackGEM ID'].fillna(0)
df_targets["BlackGEM ID"] = df_targets["BlackGEM ID"].astype(int)

df_targets_all = pd.merge(df_targets, df_targets_2, on="BlackGEM ID")#, how="left")

## Get the dataframes ready for the table
df_targets_all = df_targets_all.sort_values(by=['last_obs'], ascending=False).reset_index(drop=True)

df_targets_all['BlackGEM ID'] = df_targets_all['BlackGEM ID'].fillna(0)

df_targets_all['GEMTOM_Link'] = df_targets_all['id'].apply(lambda x: f'[Target Page](https://gemtom.blackgem.org/targets/{str(x)}/)')
df_targets_all['BGEM_ID_Link'] = df_targets_all['BlackGEM ID'].apply(
    lambda x: f'[{str(x)}](https://gemtom.blackgem.org/transients/{str(x)}/)' if x != 0 else x
)
df_targets_all['last_obs'] = Time(df_targets_all['last_obs'], format='mjd').iso
df_targets_all['last_obs'] = [x.split(" ")[0] for x in df_targets_all['last_obs']]

## Export
# df_targets_all.to_csv("./GEMTOM/data/target_watchlist_latestmags.csv", index=False)
df_targets_all.to_csv("./data/target_watchlist_latestmags.csv", index=False)
